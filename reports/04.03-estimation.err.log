Traceback (most recent call last):
  File "/Users/ethan/opt/miniconda3/envs/pythonbook3/lib/python3.11/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/Users/ethan/opt/miniconda3/envs/pythonbook3/lib/python3.11/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/ethan/opt/miniconda3/envs/pythonbook3/lib/python3.11/site-packages/jupyter_core/utils/__init__.py", line 166, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/ethan/opt/miniconda3/envs/pythonbook3/lib/python3.11/asyncio/base_events.py", line 653, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/Users/ethan/opt/miniconda3/envs/pythonbook3/lib/python3.11/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/Users/ethan/opt/miniconda3/envs/pythonbook3/lib/python3.11/site-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/ethan/opt/miniconda3/envs/pythonbook3/lib/python3.11/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import statistics
import numpy as np
import seaborn as sns
import pandas as pd
from matplotlib import pyplot as plt



ns = range(2,11)


averageSampleSds = []
averageSampleMeans = []

# Simulate data for N = 2 to 10
for n in ns:
    sample_sds = []
    sample_means = []
    for i in range(1,10000):
        sample_sd = statistics.stdev(np.random.normal(loc=100,scale=15,size=n).astype(int))
        sample_sds.append(sample_sd)
        sample_mean = statistics.mean(np.random.normal(loc=100,scale=15,size=n).astype(int))
        sample_means.append(sample_mean)
    averageSampleSds.append(statistics.mean(sample_sds))
    averageSampleMeans.append(statistics.mean(sample_means))

# Simulate data for N = 1. This is not possible in the loop above, because Python can't calculate a SD
# from only one observation
n = 1
sample_mean_1 = []
for i in range(1,10000):
    sample_mean = statistics.mean(np.random.normal(loc=100,scale=15,size=n).astype(int))
    sample_mean_1.append(sample_mean)

# Add in sample mean and SD for N=1 at the beginning of the lists
# For N = 1, the sample SD is simply 0
averageSampleSds.insert(0,0)
averageSampleMeans.insert(0,statistics.mean(sample_mean_1))

# Collect simulated data in a dataframe, together with a vector from 1 to 10 representing N
df = pd.DataFrame(
    {'N': range(1,11),
     'SampleMeans': averageSampleMeans,
     'SampleSDs': averageSampleSds
    })

# Plot the data
fig, axes = plt.subplots(1, 2, figsize=(15, 5), sharey=False)
fig.suptitle('Simulated IQ Data')

# Format the figure
sns.lineplot(data=df, x='N', y='SampleMeans',ax=axes[0], linestyle = "dashdot")
sns.lineplot(data=df, x='N', y='SampleSDs',ax=axes[1], linestyle = "dashdot")
axes[0].set(ylim=(0,120))
axes[1].set(ylim=(0,17))
axes[0].axhline(100, color = 'black', linestyle = "dashed")
axes[1].axhline(15, color = 'black', linestyle = "dashed")
axes[0].set_title("Sample Means")
axes[1].set_title("Sample Standard Deviations")
axes[0].spines[['top', 'right']].set_visible(False)
axes[1].spines[['top', 'right']].set_visible(False)

labels = ['A', 'B']
for s, ax in enumerate(axes):
    axes[s].text(-0.1, 1, labels[s], transform=axes[s].transAxes,fontsize=16, fontweight='bold', va='top', ha='right')



------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mAttributeError[0m                            Traceback (most recent call last)
Cell [0;32mIn[16], line 20[0m
[1;32m     18[0m sample_means [38;5;241m=[39m []
[1;32m     19[0m [38;5;28;01mfor[39;00m i [38;5;129;01min[39;00m [38;5;28mrange[39m([38;5;241m1[39m,[38;5;241m10000[39m):
[0;32m---> 20[0m     sample_sd [38;5;241m=[39m [43mstatistics[49m[38;5;241;43m.[39;49m[43mstdev[49m[43m([49m[43mnp[49m[38;5;241;43m.[39;49m[43mrandom[49m[38;5;241;43m.[39;49m[43mnormal[49m[43m([49m[43mloc[49m[38;5;241;43m=[39;49m[38;5;241;43m100[39;49m[43m,[49m[43mscale[49m[38;5;241;43m=[39;49m[38;5;241;43m15[39;49m[43m,[49m[43msize[49m[38;5;241;43m=[39;49m[43mn[49m[43m)[49m[38;5;241;43m.[39;49m[43mastype[49m[43m([49m[38;5;28;43mint[39;49m[43m)[49m[43m)[49m
[1;32m     21[0m     sample_sds[38;5;241m.[39mappend(sample_sd)
[1;32m     22[0m     sample_mean [38;5;241m=[39m statistics[38;5;241m.[39mmean(np[38;5;241m.[39mrandom[38;5;241m.[39mnormal(loc[38;5;241m=[39m[38;5;241m100[39m,scale[38;5;241m=[39m[38;5;241m15[39m,size[38;5;241m=[39mn)[38;5;241m.[39mastype([38;5;28mint[39m))

File [0;32m~/opt/miniconda3/envs/pythonbook3/lib/python3.11/statistics.py:922[0m, in [0;36mstdev[0;34m(data, xbar)[0m
[1;32m    920[0m [38;5;28;01mif[39;00m [38;5;28missubclass[39m(T, Decimal):
[1;32m    921[0m     [38;5;28;01mreturn[39;00m _decimal_sqrt_of_frac(mss[38;5;241m.[39mnumerator, mss[38;5;241m.[39mdenominator)
[0;32m--> 922[0m [38;5;28;01mreturn[39;00m [43m_float_sqrt_of_frac[49m[43m([49m[43mmss[49m[38;5;241;43m.[39;49m[43mnumerator[49m[43m,[49m[43m [49m[43mmss[49m[38;5;241;43m.[39;49m[43mdenominator[49m[43m)[49m

File [0;32m~/opt/miniconda3/envs/pythonbook3/lib/python3.11/statistics.py:374[0m, in [0;36m_float_sqrt_of_frac[0;34m(n, m)[0m
[1;32m    372[0m [38;5;250m[39m[38;5;124;03m"""Square root of n/m as a float, correctly rounded."""[39;00m
[1;32m    373[0m [38;5;66;03m# See principle and proof sketch at: https://bugs.python.org/msg407078[39;00m
[0;32m--> 374[0m q [38;5;241m=[39m ([43mn[49m[38;5;241;43m.[39;49m[43mbit_length[49m() [38;5;241m-[39m m[38;5;241m.[39mbit_length() [38;5;241m-[39m _sqrt_bit_width) [38;5;241m/[39m[38;5;241m/[39m [38;5;241m2[39m
[1;32m    375[0m [38;5;28;01mif[39;00m q [38;5;241m>[39m[38;5;241m=[39m [38;5;241m0[39m:
[1;32m    376[0m     numerator [38;5;241m=[39m _integer_sqrt_of_frac_rto(n, m [38;5;241m<<[39m [38;5;241m2[39m [38;5;241m*[39m q) [38;5;241m<<[39m q

[0;31mAttributeError[0m: 'numpy.int64' object has no attribute 'bit_length'


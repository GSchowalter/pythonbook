Traceback (most recent call last):
  File "/Users/ethan/opt/miniconda3/envs/pythonbook3/lib/python3.11/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/Users/ethan/opt/miniconda3/envs/pythonbook3/lib/python3.11/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/ethan/opt/miniconda3/envs/pythonbook3/lib/python3.11/site-packages/jupyter_core/utils/__init__.py", line 166, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/ethan/opt/miniconda3/envs/pythonbook3/lib/python3.11/asyncio/base_events.py", line 653, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/Users/ethan/opt/miniconda3/envs/pythonbook3/lib/python3.11/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/Users/ethan/opt/miniconda3/envs/pythonbook3/lib/python3.11/site-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/ethan/opt/miniconda3/envs/pythonbook3/lib/python3.11/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import statistics
import numpy as np
import seaborn as sns
import pandas as pd
from matplotlib import pyplot as plt



ns = range(2,11)


averageSampleSds = []
averageSampleMeans = []

# Simulate data for N = 2 to 10
for n in ns:
    sample_sds = []
    sample_means = []
    for i in range(1,10000):
        sample_sd = statistics.stdev(np.random.normal(loc=100,scale=15,size=n)#.astype(int))
        sample_sds.append(sample_sd)
        sample_mean = statistics.mean(np.random.normal(loc=100,scale=15,size=n)#.astype(int))
        sample_means.append(sample_mean)
    averageSampleSds.append(statistics.mean(sample_sds))
    averageSampleMeans.append(statistics.mean(sample_means))

# Simulate data for N = 1. This is not possible in the loop above, because Python can't calculate a SD
# from only one observation
n = 1
sample_mean_1 = []
for i in range(1,10000):
    sample_mean = statistics.mean(np.random.normal(loc=100,scale=15,size=n).astype(int))
    sample_mean_1.append(sample_mean)

# Add in sample mean and SD for N=1 at the beginning of the lists
# For N = 1, the sample SD is simply 0
averageSampleSds.insert(0,0)
averageSampleMeans.insert(0,statistics.mean(sample_mean_1))

# Collect simulated data in a dataframe, together with a vector from 1 to 10 representing N
df = pd.DataFrame(
    {'N': range(1,11),
     'SampleMeans': averageSampleMeans,
     'SampleSDs': averageSampleSds
    })

# Plot the data
fig, axes = plt.subplots(1, 2, figsize=(15, 5), sharey=False)
fig.suptitle('Simulated IQ Data')

# Format the figure
sns.lineplot(data=df, x='N', y='SampleMeans',ax=axes[0], linestyle = "dashdot")
sns.lineplot(data=df, x='N', y='SampleSDs',ax=axes[1], linestyle = "dashdot")
axes[0].set(ylim=(0,120))
axes[1].set(ylim=(0,17))
axes[0].axhline(100, color = 'black', linestyle = "dashed")
axes[1].axhline(15, color = 'black', linestyle = "dashed")
axes[0].set_title("Sample Means")
axes[1].set_title("Sample Standard Deviations")
axes[0].spines[['top', 'right']].set_visible(False)
axes[1].spines[['top', 'right']].set_visible(False)

labels = ['A', 'B']
for s, ax in enumerate(axes):
    axes[s].text(-0.1, 1, labels[s], transform=axes[s].transAxes,fontsize=16, fontweight='bold', va='top', ha='right')



------------------


[0;36m  Cell [0;32mIn[16], line 20[0;36m[0m
[0;31m    sample_sd = statistics.stdev(np.random.normal(loc=100,scale=15,size=n)#.astype(int))[0m
[0m                                 ^[0m
[0;31mSyntaxError[0m[0;31m:[0m invalid syntax. Perhaps you forgot a comma?


